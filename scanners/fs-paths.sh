# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

scan_fs_shells() {
    declare -a shell_paths;
    # https://www.shadowserver.org/news/technical-summary-of-observed-citrix-cve-2023-3519-incidents/
    shell_paths[0]="/var/vpn/theme/.theme.php";

    # ref: https://www.mandiant.com/resources/blog/citrix-zero-day-espionage
    shell_paths[1]="/var/tmp/the";
    shell_paths[2]="/var/tmp/npc";

    # tunneler configs
    shell_paths[3]="/var/tmp/conf/npc.conf";
    shell_paths[4]="/var/tmp/conf/multi_account.conf";
    

    local found=false;
    for shell_path in "${shell_paths[@]}"; do
        if [ -f "$root_directory/$shell_path" ]; then
            found=true;
            report_match "$shell_path, known path to malware artifact.";
        fi
    done

    declare -a dirs;
    dirs[0]="/var/netscaler/logon/LogonPoint/uiareas";
    dirs[1]="/var/netscaler/logon/LogonPoint/uiareas/*/";
    dirs[3]="/netscaler/ns_gui/epa/scripts/*/";
    dirs[4]="/netscaler/ns_gui/vpns/theme/default";
    dirs[5]="/var/vpn/themes/";


    declare -a denylist;
    denylist[0]="[a-z0-9_\.]\.php";

    for dir in "${dirs[@]}"; do
        if [ -d "$root_directory/$dir" ]; then
            for blackterm in "${denylist[@]}"; do
                local entries=$(ls "$root_directory/$dir" | grep -E "$blackterm");
                if [ -n "$entries" ]; then
                    found=true;
                    report_match "$entries, known path to malware artifact.";
                fi
            done
        fi
    done

    if [ "$found" != true ]; then
        debug "did not find malware artifacts";
    fi
}

scan_fs_copied_conf() {
    declare -a dirs;
    dirs[0]="/var/vpn/themes";
    
    local found=false;
    for dir in "${dirs[@]}"; do
        if [ -d "$root_directory/$dir" ]; then
            local entries=$(ls "$root_directory/$dir" | grep "\.js$");
            if [ -n "$entries" ]; then
                found=true;
                report_match "$entries, suspicious paths to potential data staging.";
            fi
        fi
    done

    if [ "$found" != true ]; then
        debug "did not find data staging artifacts";
    fi
}

scan_fs_setuid() {
    local readonly path="$root_directory";

    if [ ! -d "$path" ]; then
        debug "didn't find directory: $path";
        return
    fi

    local found=false;
    local findcmd="find -L $path -type f";
    local entries=$($findcmd -perm 4000 -user root \( -not -path /netscaler/ping -and -not -path /netscaler/ping6 -and -not -path /netscaler/traceroute -and -not -path /netscaler/traceroute6 -and -not -path /sbin/mksnap_ffs -and -not -path /sbin/shutdown -and -not -path /sbin/poweroff -and -not -path /usr/bin/crontab -and -not -path /usr/bin/lock -and -not -path /usr/bin/login -and -not -path /usr/bin/passwd -and -not -path /usr/bin/su -and -not -path /usr/libexec/ssh-keysign -and -not -path /usr/bin/ypasswd \) | perl -0ne 'chomp; print(unpack("H*", $_), "\n")');
    if [ -n "$entries" ]; then
        found=true;
        report_match "Found suspicious setuid binaries";
        report_ns_matches "$entries";
    fi


    if [ "$found" != true ]; then
        debug "did not find denylisted or suspicious content in $path";
    fi
}

scan_fs_known_paths() {
    scan_fs_setuid;
    scan_fs_copied_conf;
    scan_fs_shells;
}
