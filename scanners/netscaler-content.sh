# Copyright 2023 Mandiant

# FreeBSD/NetScaler bash doesn't support array declaration shortcut
# so we create the array by hand... I'm sorry.
declare -a ns_content_blacklist;
# look for strings found in most of the eval shells
ns_content_blacklist[0]="http_response_code([0-9]{3})";
ns_content_blacklist[1]="str_rot13";
ns_content_blacklist[2]="base64_decode";
ns_content_blacklist[3]="@_POST".
ns_content_blacklist[4]="eval([^h][^a][^n]";
ns_content_blacklist[5]="Expires: Wed, 11 Jan 1984 05:00:00";


# REGEORG.NEO tunneler
ns_content_blacklist[6]="blv_encode";
ns_content_blacklist[7]="sayhello";

# SECRETSAUCE webshell
ns_content_blacklist[8]="BEGIN PUBLIC KEY";
ns_content_blacklist[9]="openssl_public_decrypt";

# misc bad seen in webshells
ns_content_blacklist[10]="#nssecret#";

ns_content_blacklist[11]="uRemote";
ns_content_blacklist[12]="dRemote";

# bishopfox https://github.com/BishopFox/CVE-2023-3519/
ns_content_blacklist[13]="<?=\`curl"

# mass scanning
ns_content_blacklist[14]="168\.100\.11\.89:8000"

declare -a ns_exploit_dirs;
ns_exploit_dirs[0]="/netscaler/portal/templates/";
ns_exploit_dirs[1]="/netscaler/portal/scripts/";



report_ns_matches() {
    entries="$1";
    for entry in $entries; do
        report_encoded_file_name "$entry";
    done
}

# Search the files in the given path for blacklisted terms.
# The blacklist is found above, at `ns_content_blacklist`.
scan_ns_directory_content() {
    local readonly path="$root_directory";

    if [ ! -d "$path" ]; then
        debug "didn't find directory: $path";
        return
    fi

    local found=false;
    for re in "${ns_content_blacklist[@]}"; do
        local findcmd="find -L $path -type f";
        local entries=$($findcmd -exec grep -elI --null "$re" {} + | perl -0ne 'chomp; print(unpack("H*", $_), "\n")');
        if [ -n "$entries" ]; then
            found=true;
            report_match "blacklisted content '$re'";
            report "matches for '$re':";
            report_ns_matches "$entries";
        fi
    done

    if [ "$found" != true ]; then
        debug "did not find blacklisted or suspicious content in $path";
    fi
}

# Search the files in the given path for nobody:root ownership
# This is relatively rare and a good indication of post-exploitation
# files being dropped
scan_ns_file_ownership() {
    local readonly path="$root_directory";

    if [ ! -d "$path" ]; then
        debug "didn't find directory: $path";
        return
    fi

    # /var/vpn/bookmarks/ contains legit entries with prefix `bm_prefix_`
    # on NetScaler versions after 13.0.47.24 (patch)
    local entries=$(find "-L $path" -type f -user nobody -gid 0 \( -not -name "sess_ca*" and -not -path "/var/nstmp/*" \) -print0 | perl -0ne 'chomp; print(unpack("H*", $_), "\n")');
    if [ -n "$entries" ]; then
        report_match "suspicious file ownership";
        report "files with ownership nobody:root:";
        report_ns_matches "$entries";
        report "Please review the above paths for any unexpected files.";
        report "Exploits commonly write to files with these ownerships;"
    else
        debug "did not find incorrect permissions in $path";
    fi
}



scan_netscaler_content() {
        scan_ns_directory_content;
        scan_ns_file_ownership;
    done
}
